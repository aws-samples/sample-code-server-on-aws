AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function to stop idle EC2 instances'

Parameters:
  TargetEC2InstanceId:
    Type: AWS::EC2::Instance::Id
    Description: The ID of the EC2 instance to monitor for idleness

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaEC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:StopInstances
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${TargetEC2InstanceId}'
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                Resource: '*'
        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  IdleEC2CheckerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os

          def handler(event, context):
              ec2 = boto3.client('ec2')
              cloudwatch = boto3.client('cloudwatch')
              
              target_instance_id = os.environ['TARGET_INSTANCE_ID']
              
              # Check CPU utilization for the last 30 minutes
              response = cloudwatch.get_metric_statistics(
                  Namespace='AWS/EC2',
                  MetricName='CPUUtilization',
                  Dimensions=[{'Name': 'InstanceId', 'Value': target_instance_id}],
                  StartTime=datetime.datetime.utcnow() - datetime.timedelta(minutes=30),
                  EndTime=datetime.datetime.utcnow(),
                  Period=300,
                  Statistics=['Average']
              )
              
              datapoints = response['Datapoints']
              if datapoints and max(point['Average'] for point in datapoints) <= 10:
                  print(f"Stopping idle instance: {target_instance_id}")
                  ec2.stop_instances(InstanceIds=[target_instance_id])

      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          TARGET_INSTANCE_ID: !Ref TargetEC2InstanceId

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(30 minutes)"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt IdleEC2CheckerFunction.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref IdleEC2CheckerFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn

